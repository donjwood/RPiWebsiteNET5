@page
@model RPiWebsiteNET5.Pages.Users.CreateModel

@using System.Security.Claims

@using RPiWebsiteNET5.Identity.Extensions

@{
    ViewData["Title"] = "Create User";
}
@if (@User.GetClaimBoolValue("IsAdmin")) 
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-page="/Users/Index">Manage Users</a></li>
            <li class="breadcrumb-item active" aria-current="page">Create User</li>
        </ol>
    </nav>
}
<div class="row">
    <div class="col-12">
        <h1>Create User</h1>
    </div>
</div>
<div class="row">
    <div id="createUserApp" class="col-12">
        <form id="createUserForm" method="POST">
            @if (Model.IsUpdateSuccessful)
            {
                <div class="row">
                    <div class="col-12">
                    <div class="alert alert-success" role="alert">
                                <i class="fas fa-check"></i> Successfully submitted user changes.
                        </div>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div class="row">
                    <div class="col-12">
                        <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-triangle"></i> @Model.ErrorMessage
                        </div>
                    </div>
                </div>
            }
            <div>
                <div class="form-group row">
                    <label asp-for="UserVM.FirstName" class="col-lg-3 col-xl-2 col-form-label"></label>
                    <div class="col-lg-9 col-xl-10">
                        <input asp-for="UserVM.FirstName" class="form-control" v-model="firstName">
                    </div>
                </div>
                <div class="form-group row">
                    <label asp-for="UserVM.MiddleName" class="col-lg-3 col-xl-2 col-form-label"></label>
                    <div class="col-lg-9 col-xl-10">
                        <input asp-for="UserVM.MiddleName" class="form-control" v-model="middleName">
                    </div>
                </div>
                <div class="form-group row">
                    <label asp-for="UserVM.LastName" class="col-lg-3 col-xl-2 col-form-label"></label>
                    <div class="col-lg-9 col-xl-10">
                        <input asp-for="UserVM.LastName" class="form-control" v-model="lastName">
                    </div>
                    <span class="offset-lg-3 offset-xl-2 col-lg-9 col-xl-10" asp-validation-for="UserVM.LastName"></span>
                </div>
                <div class="form-group row">
                <label asp-for="UserVM.Email" class="col-lg-3 col-xl-2 col-form-label"></label>
                    <div class="col-lg-9 col-xl-10">
                       <input asp-for="UserVM.Email" class="form-control" v-model="email">
                    </div>
                    <span class="offset-lg-3 offset-xl-2 col-lg-9 col-xl-10" asp-validation-for="UserVM.Email"></span>
                </div>
                <div class="form-group row">
                    <div class="offset-lg-3 offset-xl-2 col-lg-9 col-xl-10">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="chkUseEmailAsUsername" name="chkUseEmailAsUsername" v-model="useEmailAsUsername">
                            <label for="chkUseEmailAsUsername" class="form-check-label">
                                Use email address as username.
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label asp-for="UserVM.Username" class="col-lg-3 col-xl-2 col-form-label"></label>
                    <div class="col-lg-9 col-xl-10">
                        <div class="input-group">
                            <input asp-for="UserVM.Username" class="form-control" :readonly="useEmailAsUsername" v-model="username">
                            <div class="input-group-append">
                                <span class="input-group-text">
                                    <span v-if="username == ''"><i class="fas fa-cog"></i></span>
                                    <span v-else-if="isCheckingUsernameAvailability"><i class="fas fa-cog fa-spin"></i></span>
                                    <span v-else-if="!isUsernameAvailable" style="color: red;"><i class="fas fa-times-circle"></i></span>
                                    <span v-else style="color: green;"><i class="fas fa-check-circle"></i></span>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="offset-lg-3 offset-xl-2 col-lg-9 col-xl-10" style="height:15px;">
                        <span asp-validation-for="UserVM.Username"></span>
                        <span class="field-error-message" v-if="username != '' && !isCheckingUsernameAvailability && !isUsernameAvailable">Username is unavailable.</span>
                        <span class="field-valid-message" v-else-if="username != '' && !isCheckingUsernameAvailability && isUsernameAvailable">Username is available.</span>
                    </div>
                </div>
                <div class="form-group row">
                    <label asp-for="Password" class="col-lg-3 col-xl-2 col-form-label"></label>
                    <div class="col-lg-9 col-xl-10">
                        <input class="form-control" asp-for="Password" />
                    </div>
                    <span asp-validation-for="Password" class="offset-lg-3 offset-xl-2 col-lg-9 col-xl-10"></span>
                </div>
                <div class="form-group row">
                    <label asp-for="PasswordConf" class="col-lg-3 col-xl-2 col-form-label"></label>
                    <div class="col-lg-9 col-xl-10">
                        <input class="form-control" asp-for="PasswordConf" />
                    </div>
                    <span asp-validation-for="PasswordConf" class="offset-lg-3 offset-xl-2 col-lg-9 col-xl-10"></span>
                </div>
                <div class="form-group row">
                    <div class="offset-lg-3 offset-xl-2 col-lg-9 col-xl-10">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" asp-for="UserVM.IsAdmin" v-model="isAdmin">
                            <label for="chkIsAdmin" class="form-check-label">
                                This user is an admin.
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-12 text-center">
                        <button @@click="submitForm" class="btn btn-primary"><i class="fas fa-user-plus"></i> Create User</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<script>

    var requestVerificationToken = document.getElementsByName("__RequestVerificationToken")[0].value;
    var editUserForm = document.getElementById("createUserForm");

    var editUserApp = new Vue({
        el: '#createUserApp',
        data: {
            id: 0,
            firstName: '',
            middleName: '',
            lastName: '',
            email: '',
            username: '',
            isAdmin: false,
            loggedInUserID: @User.GetClaimValue(ClaimTypes.Sid),
            useEmailAsUsername: false,
            isUsernameAvailable: true,
            isCheckingUsernameAvailability: false
        },
        created () {
            //If the username an email match, set the useEmailAsUsername property.
            this.useEmailAsUsername = this.username == this.email && this.username != 'admin';
        },
        watch: {
            email: function () {
                if (this.useEmailAsUsername) {
                    this.username = this.email;
                }
            },
            useEmailAsUsername: function () {
                if (this.useEmailAsUsername) {
                    this.username = this.email;
                }
            },
            username: async function() {
                try {
                    await this.checkUsernameAvailable();
                } catch (err) {
                    console.log(err);
                }
            }
        },
        methods: {
            checkUsernameAvailable: async function () {
                 this.isCheckingUsernameAvailability = true;
                try {
                    axios.defaults.headers.common['RequestVerificationToken'] = requestVerificationToken;

                    //See if the username is available
                    let res = await axios
                        .post('/Users/Create?handler=IsUsernameAvailable', {
                            Username: this.username
                        });

                    this.isUsernameAvailable = res.data;

                } catch(err) {
                    console.log(err);
                }
                this.isCheckingUsernameAvailability = false;
            },
            submitForm: function (e) {
                if (this.isUsernameAvailable) {
                    editUserForm.submit();
                } else {
                    e.preventDefault();
                }
            }
        }
    });
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
